@page "/task/"

@using System.Text.Json
@using me_task_blazor.Shared

@inject HttpClient Http

<h1>Task history</h1>

<p>fetching data from the server.</p>

@if (List == null)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>

    </div>
}
else
{
    @foreach (var item in List)
    {
        @foreach (var model in item.Res) totalTime = totalTime + Convert.ToInt32(model.Value.ElementAt(1));
        <div class="card">
            <div class="card-header" id="headingOne">
                <h5 class="mb-0">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Task @item.Id
                    </button>
                </h5>
            </div>
            <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
                <div class="card-body">
                    <br>A job of @item.Images images is going to be edited by a crew of people:<br>
                    Every person have speed property:
                    @foreach (var w in item.Workers)
                    {
                        <p>@w.Name - @w.ImgPerMinute img/min </p><br>
                    }
                    Answer:<br>
                    1.How long will this job take in total ?<br>
                    -Total time: @totalTime <br>

                    2.How many images will be edited by every person?<br>
                    @foreach (var w in item.Res)
                    {
                        <p>-Worker @w.Key edit @w.Value.ElementAt(0)</p><br>
                    }

                </div>
            </div>
        </div>

    }
}

@code {
    private IEnumerable<TaskModel> List;
    //public HttpResponseMessage Response = null;
    //public string List;
    bool apiError = false;
    int totalTime = 0;

    /// <summary>
    /// On load page call api to get data
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {

        var response = await (Http.GetFromJsonAsync<IEnumerable<TaskModel>>("api/TaskModels"));
        List = response.ToArray();


    }

}     