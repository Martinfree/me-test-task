@using System.Net.Http.Json
@using me_task_blazor.Shared
@inject HttpClient Http

<h3>Try to find answer</h3>
<td>
    Number of Images to edit:
    <input @bind="@NewTask.Images" type="number" min="1" max="100" class="form-control">
</td>
<br>
Number of workers:
<input value="@count" type="number" class="form-control" min="1" max="100" step="1" @oninput="onchange_n">
<br>


<table class="table">
    <thead class="thead-dark">
        <tr>
            <th scope="col">#</th>
            <th scope="col">Person</th>
            <th scope="col">Speed (img/min)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var i in Enumerable.Range(0, workers.Count))
        {
            <tr>
                <th scope="row"> @i </th>
                <td>
                    <input value="@workers[@i].Name" placeholder="Person Name" @oninput="@((ChangeEventArgs e) => @workers[@i].Name = e.Value.ToString())" type="text" class="form-control">
                </td>
                <td>
                    <input value="@workers[@i].ImgPerMinute" min="1" max="100" step="1" @oninput="@((ChangeEventArgs e) => @workers[@i].ImgPerMinute = Convert.ToInt32(e.Value.ToString()))" type="number" class="form-control">
                </td>

            </tr>
        }


    </tbody>

</table>

<div>
    <button type="button" class="btn btn-primary" @onclick="GetAnswer">Answer</button>
</div>

@if (Answer)
{
    @foreach (var model in NewTask.Res) totalTime = totalTime+Convert.ToInt32(model.Value.ElementAt(1));
    <div>
        <br>A job of @NewTask.Images images is going to be edited by a crew of people:<br>
        Every person have speed property:
        @foreach (var w in NewTask.Workers)
        {
            <p>@w.Name - @w.ImgPerMinute img/min </p><br>
        }
        Answer:<br>
        1.How long will this job take in total ?<br>
        -Total time: @totalTime <br>

        2.How many images will be edited by every person?<br>
        @foreach (var w in NewTask.Res)
        {
    <p>-Worker @w.Key edit @w.Value.ElementAt(0)</p><br>
        }


    </div>
}
else if (Answer && Response != System.Net.HttpStatusCode.OK)
{
    <div>
        <br>Error:<br>

        StatusCode: @Response<br>

    </div>
}

@code {
    int totalTime = 0;
    public List<WorkerModel> workers = new List<WorkerModel>(){
        new WorkerModel{
            Name = "",
            ImgPerMinute = 0
    }};
    public TaskModel NewTask = new TaskModel()
    {
        Images = 0,
        Workers = new List<WorkerModel>().ToArray()
    };

    public bool Answer = false; //If button clicked
    private int count = 1; // workers counter
    private System.Net.HttpStatusCode Response;
    string TaskResult;
    /// <summary>
    /// Initialize Answer section
    /// </summary>
    private void GetAnswer()
    {
        // add workers to task
        var s = Enumerable.Range(0, workers.Count);
        //NewTask.Workers.Clear();

        NewTask.Workers = workers;

        var response = CreateTask();
        Answer = true;

    }

    /// <summary>
    /// Call PostCreateTaskModels and return saved data to NewTask
    /// </summary>
    private async Task<System.Net.HttpStatusCode> CreateTask()
    {

        var response = await (Http.PostAsJsonAsync<TaskModel>("api/TaskModels", NewTask));
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            NewTask = await response.Content.ReadFromJsonAsync<TaskModel>();
            return System.Net.HttpStatusCode.OK;
        }
        else
        {
            return System.Net.HttpStatusCode.NoContent;
        }
    }

    // What do when number of workers changed
    private void onchange_n(ChangeEventArgs e)
    {
        count = 0;
        // Parse value
        if (Int32.TryParse(e.Value.ToString(), out int n))
        {
            count = n;
            // Delete Workers
            workers.Clear();
        }
        else
        {
            count = 0;
        }

        // ReInitialize workers
        for (int i = 0; i < count; i++) workers.Add(new WorkerModel()
        {

            Name = "",
            ImgPerMinute = 0
        });
        StateHasChanged();
    }



}
